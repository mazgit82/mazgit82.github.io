if(file.exists(nf)) parametros = fread("parametrosGBM.txt")
parametros
if(file.exists(nf)) {
parametros = fread("parametrosGBM.txt")
setkeyv(parametros, claves)
}
catappend(file=nf, header=TRUE)
foreach(p = it)
%:% when exists("parametros") || nrow(parametros[J(p)])>0
foreach(p = it) %:% when exists("parametros") || nrow(parametros[J(p)])>0
foreach(p = it) %:% when exists("parametros") || nrow(parametros[J(p)])>0 %do% {
foreach(p = it) %:% when(exists("parametros") || nrow(parametros[J(p)])>0) %do% {
modelo = modela(p, n.trees=max(rango_n.trees))
for(n.trees in rango_n.trees){
salidas = predict(modelo, n.trees=n.trees)
p
it
foreach(p = it) %:% when(exists("parametros") || nrow(parametros[J(p)])>0) %do% {
print(p)
modelo = modela(p, n.trees=max(rango_n.trees))
foreach(p = it) %do% print(p)
foreach(p = it) %do% print(unlist(p))
# Aquí creamos el iterador
it <- ihasNext(splat(product)(rangos_parametros))
foreach(p = it) %do% print(unlist(p))
paste(c("uno","dos"))
paste(c("uno","dos"), collapse = " ")
paste0(c("uno","dos"), collapse = " ")
catappend(paste0(claves,"\n",collapse=" "), file=nf, header=TRUE)
catappend(paste0(claves,"\n",collapse=" "), file=nf, header=FALSE)
catappend(paste0(claves,collapse=" "), file=nf, header=FALSE)
catappend(sprintf("%s Train Test Time", paste0(claves,collapse=" "))), file=nf, header=FALSE, header=TRUE)
catappend(sprintf("%s Train Test Time", paste0(claves, collapse=" ")), file=nf, header=FALSE, header=TRUE)
catappend(sprintf("%s Train Test Time", paste0(claves, collapse=" ")), file=nf, header=TRUE)
catappend(sprintf("%s Train Test Time", paste0(claves, collapse=" ")), file=nf, header=TRUE)
system.time(ls())
?system.time
Sys.time()
a=Sys.time()
b= Sys.time()
a-b
a-b+0
1*(a-b)
paste0((a-b))
as.numeric(a-b)
rmse = function(error) sqrt(mean(error^2))
# Function that returns Mean Absolute Error
mae = function(error) mean(abs(error))
# Librería para la función Splat
library(plyr)
# Libreria de iteradores
library(iterators)
library(itertools)
library("foreach")
library("doMC")
library("functional")
library(gbm)
rango_n.trees = c(100, 1000, 5000, 10000)
rangos_parametros = list(c(1, 2, 4, 6, 8, 10),
c(0.001, 0.01, 0.05, 0.1, 0.5),
c(2, 5, 10, 15, 20))
nombres_parametros = c("interaction.depth", "shrinkage", "n.minobsinnode")
names(rangos_parametros) = nombres_parametros
claves = c(nombres_parametros, "n.trees")
funcion = gbm
# Cargamos los datos
load(url("http://www.dcc.fc.up.pt/~ltorgo/DataMiningWithR/DataSets/algae.RData"))
# 1/3 de los datos para test
indices = which(as.logical(rbinom(nrow(algae), 1, 2/3)))
entrenamiento = algae[indices,c(12, 1:11)]
validacion = algae[-indices,c(12, 1:11)]
modela = splat(CurryL(funcion, formula=a1~.,
data=entrenamiento))
nf = "parametrosGBM.txt"
if(file.exists(nf)) {
parametros = fread("parametrosGBM.txt")
setkeyv(parametros, claves)
}
library(data.table)
if(file.exists(nf)) {
parametros = fread("parametrosGBM.txt")
setkeyv(parametros, claves)
}
parametros
is.empty(parametros)
parametros
?fread
catappend = function(...,file="",header=FALSE) {
fe <- file.exists(file)
if(header && fe) warning(paste("catappend: File ", file," exists\n",immediate.=TRUE))
#    if(header) cat(paste("#",Sys.time()), append=TRUE,fill=TRUE,file=file)
if(!header || (header && !fe)) cat(..., append=TRUE,fill=TRUE,file=file)
}
nf = "parametrosGBM.txt"
if(file.exists(nf)) {
parametros = fread("parametrosGBM.txt")
setkeyv(parametros, claves)
}
catappend(sprintf("%s Train Test Time", paste0(claves, collapse=" ")), file=nf, header=TRUE)
# Aquí creamos el iterador
it <- ihasNext(splat(product)(rangos_parametros))
foreach(p = it) %:% when(exists("parametros") || nrow(parametros[J(p)])>0) %do% {
comienzo = Sys.time()
modelo = modela(p, n.trees=max(rango_n.trees))
fin = Sys.time()
for(n.trees in rango_n.trees){
salidasTrain = predict(modelo, newdata = entrenamiento, n.trees=n.trees)
salidasTest = predict(modelo, newdata = validacion, n.trees=n.trees)
catappend(sprintf("%s %d %f %f",
paste0(it, collapse = " "),
n.trees,
mae(salidasTrain-entrenamiento[[1]]),
mae(salidasTest-validacion[[1]]),
as.numeric(fin-comienzo),
file=nf)
}
it <- ihasNext(splat(product)(rangos_parametros))
foreach(p = it) %:% when(exists("parametros") || nrow(parametros[J(p)])>0) %do% {
comienzo = Sys.time()
modelo = modela(p, n.trees=max(rango_n.trees))
fin = Sys.time()
for(n.trees in rango_n.trees){
salidasTrain = predict(modelo, newdata = entrenamiento, n.trees=n.trees)
salidasTest = predict(modelo, newdata = validacion, n.trees=n.trees)
catappend(sprintf("%s %d %f %f",
paste0(it, collapse = " "),
n.trees,
mae(salidasTrain-entrenamiento[[1]]),
mae(salidasTest-validacion[[1]]),
as.numeric(fin-comienzo),
file=nf))
}
}
datos = load(url("http://www.dcc.fc.up.pt/~ltorgo/DataMiningWithR/DataSets/algae.RData"))
names(datos)
datos = readRDS(url("http://www.dcc.fc.up.pt/~ltorgo/DataMiningWithR/DataSets/algae.RData"))
datos = load(url("http://www.dcc.fc.up.pt/~ltorgo/DataMiningWithR/DataSets/algae.RData"))
datos
names(algae)
datos = algae[, c(1:12)]
library(caret)
gbmGrid <-  expand.grid(interaction.depth = c(1, 4, 8),
n.trees = c(10,90,100, 500, 1000, 2000),
shrinkage = c(0.01, 0.05, 0.1))
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 5)
set.seed(1)
set.seed(1)
gbmFit1 <- train(Class ~ ., data = training,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
gbmFit1
?gbm
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
metric="mae"
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
metric="mae",
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
metric="MAE",
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
summaryFunction = function(x) c=(mae=mean(abs(x$obs-x$pred))),
metric="mae",
allowParallel=TRUE,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
summaryFunction = function(x) c(mae=mean(abs(x$obs-x$pred))),
metric="mae",
allowParallel=TRUE,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
mae = function(x) mean(abs(x[1]-x[2]))
set.seed(1)
mae = function(x,y,z) mean(abs(x[1]-x[2]))
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
summaryFunction = mae,
metric="mae",
allowParallel=TRUE,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
mae = function(x,y,z) c(mae=mean(abs(x[1]-x[2])))
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
summaryFunction = mae,
metric="mae",
allowParallel=TRUE,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
warnings()
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 5,
summaryFunction = mae)
mae = function(x,y,z) c(mae=mean(abs(x[1]-x[2])))
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
metric="mae",
allowParallel=TRUE,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
mae = function(data, lev = NULL, model = NULL) c(mae=mean(abs(data[1]-data[2])))
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
metric="mae",
allowParallel=TRUE,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
metric="mae",
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
mae = function(data, lev = NULL, model = NULL) c(mae=mean(abs(data[1]-data[2])))
gbmGrid <-  expand.grid(interaction.depth = c(1, 4, 8),
n.trees = c(10,90,100, 500, 1000, 2000),
shrinkage = c(0.01, 0.05, 0.1))
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 5,
summaryFunction = mae)
mae = function(data, lev = NULL, model = NULL) c(mae=mean(abs(data[1]-data[2])))
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
metric="mae",
allowParallel=FALSE,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
metric="mae",
allowParallel=FALSE,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
warnings()
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
metric="mae",
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
warnings()
mae = function(data, lev = NULL, model = NULL) c(mae=mean(abs(data$obs-data$pred)))
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
metric="mae",
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
warnings()
gbmGrid <-  expand.grid(interaction.depth = c(1, 4, 8),
n.trees = c(10,90,100, 500, 1000, 2000),
shrinkage = c(0.01, 0.05, 0.1))
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 5,
summaryFunction = mae)
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
metric="mae",
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
gbmFit1
mae = function(data, lev = NULL, model = NULL) c(mae=-mean(abs(data$obs-data$pred)))
gbmGrid <-  expand.grid(interaction.depth = c(1, 4, 8),
n.trees = c(10,90,100, 500, 1000, 2000),
shrinkage = c(0.01, 0.05, 0.1))
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 5,
summaryFunction = mae)
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
metric="mae",
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
gbmFit1
plot(gbmFit1)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 5,
summaryFunction = mae,
repeats=10)
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
metric="mae",
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
plot(gbmFit1)
gbmFit1
str(gbmFit1,max.level = 1)
agbmFit1
gbmFit1
gbmGrid <-  expand.grid(interaction.depth = c(1, 4, 8),
n.trees = seq(10,1000,10),
shrinkage = c(0.01, 0.05, 0.1))
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 5,
summaryFunction = mae)
set.seed(1)
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
metric="mae",
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
plot(gbmFit1)
gbmFit1
load(url("http://www.dcc.fc.up.pt/~ltorgo/DataMiningWithR/DataSets/testAlgae.RData"))
load(url("http://www.dcc.fc.up.pt/~ltorgo/DataMiningWithR/DataSets/algaeSols.RData"))
datosTest = cbind(a1=algae.sols$a1, test.algae)
mae(predict(gbmFit1, newdata=datosTest, n.trees=p$n.trees)-datosTest[,1])
mae(predict(gbmFit1, newdata=datosTest)-datosTest[,1])
predict(gbmFit1, datosTest)
mae(predict(gbmFit1, datosTest)-datosTest$a1)
length(predict(gbmFit1, datosTest))
length(datosTest$a1)
length(predict(gbmFit1))
complete.cases(datosTest)
sum(complete.cases(datosTest))
sum(complete.cases(datos))
gbmFit1
?gbm
modelo = gbm(a1 ~ ., datos)
modelo = gbm(a1 ~ ., data=datos)
sum(!complete.cases(datos))
?na.omit
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA))
DF
na.omit(DF)
?na.pass
gbmFit1 <- train(a1 ~ ., data = datos,
method = "gbm",
trControl = fitControl,
tuneGrid = gbmGrid,
metric="mae",
na.action = na.pass,
## This last option is actually one
## for gbm() that passes through
verbose = FALSE)
plot(gbmFit1)
gbmFit1
mae(predict(gbmFit1)-datosTest$a1)
length(predict(gbmFit1, datosTest))
nrow(datosTest)
length(predict(gbmFit1, datosTest, na.action=na.pass))
mae(predict(gbmFit1, datosTest, na.action=na.pass)-datosTest$a1)
mae(predict(gbmFit1, datosTest, na.action=na.pass)-datosTest$a1)
head(datosTest)
mae(predict(gbmFit1, datosTest, na.action=na.pass)-datosTest$a1)
mae(predict(gbmFit1, datosTest, na.action=na.pass)-datosTest[["a1"]])
mae(predict(gbmFit1, newdata=datosTest, na.action=na.pass)-datosTest[["a1"]])
length(predict(gbmFit1, datosTest))
length(predict(gbmFit1, datosTest, na.action=na.pass))
length(predict(gbmFit1, datosTest, na.action=na.omit))
predict(gbmFit1, datosTest, na.action=na.pass)
predict(gbmFit1, datosTest, na.action=na.pass)-datosTest$a1
mae(predict(gbmFit1, datosTest, na.action=na.pass)-datosTest$a1)
mean(abs(predict(gbmFit1, datosTest, na.action=na.pass)-datosTest$a1))
mean(abs(predict(gbmFit1, datos, na.action=na.pass)-datos$a1))
setwd("C:/Users/Usuario/Dropbox/TRABAJO LOCAL ALLWAYSSYNC/blog/coursera")
para2 = read.table("para1.txt")
saveRDS(para2, "para1.rds")
para3 = readRDS("para1.rds")
para3
head(para3)
para2 = read.table("para1.txt",header = TRUE)
saveRDS(para2, "para1.rds")
para3
para3 = readRDS("para1.rds")
head(para3)
runApp()
library(shiny)
runApp()
runApp()
library(slidify)
slidify("index.Rmd")
dir()
cd myDeck
cd("myDeck")
setwd("myDeck")
slidify("index.Rmd")
results = readRDS(url("https://dl.dropboxusercontent.com/u/2788781/para1.rds"))
results = readRDS(url("http://dl.dropboxusercontent.com/u/2788781/para1.rds"))
x <- getURL("https://dl.dropboxusercontent.com/u/2788781/para1.rds")
library(RCurl)
x <- getURL("https://dl.dropboxusercontent.com/u/2788781/para1.rds")
y <- read.csv(text = x)
update.packages("Curl")
library(Curl)
update.packages("RCurl")
library(RCurl)
x <- getURL("https://dl.dropboxusercontent.com/u/2788781/para1.rds")
install.packages("libcurl")
x <- getURL("https://dl.dropboxusercontent.com/u/2788781/para1.rds",.opts = list(ssl.verifypeer = FALSE))
y <- read.csv(text = x)
x <- getURL("https://dl.dropboxusercontent.com/u/2788781/para1.rds",.opts = list(ssl.verifypeer = FALSE))
x <- getURL("https://dl.dropboxusercontent.com/u/2788781/para1.rds",.opts = list(ssl.verifypeer = FALSE),binary=TRUE)
?geturl
?getURL
x <- getBinaryURL("https://dl.dropboxusercontent.com/u/2788781/para1.rds",.opts = list(ssl.verifypeer = FALSE))
y <- read.csv(text = x)
?readRDS
results = readRDS(x)
?RCurl
?Rcurl
?geturl
?getURL
textConnection()
rawConnection
x <- getBinaryURL("https://dl.dropboxusercontent.com/u/2788781/para1.rds",.opts = list(ssl.verifypeer = FALSE))
results = readRDS(rawConnection(x))
?rawConnection
results = readRDS(rawConnection(x,"r"))
results = readRDS(textConnection(x))
y = rawConnection(x)
y
y
kk = readRDS(y)
gzfile
gzfile("https://www.dropbox.com/s/27dqwu1tn1zi05z/para1.zip?dl=0")
read.table(gzfile("https://www.dropbox.com/s/27dqwu1tn1zi05z/para1.zip?dl=0"))
